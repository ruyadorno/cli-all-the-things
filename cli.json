{
  "title": "$ cli --tools --for all-the-things",
  "presenter": "Ruy Adorno",
  "date": "December 12th",
  "conference": "Node+JS Interactie",
  "location": "Montreal ‚ù§Ô∏è Canada",
  "twitter": {
    "presenter": "@ruyadorno",
    "event": "#NodeJSInteractive"
  },
  "slides": [
    {
      "type": "titleOnly",
      "title": "$ cli --tools --for all-the-things"
    },
    {
      "type": "split",
      "left": {
        "title": "Hi, I'm Ruy",
        "list": [
          "OSS Software Dev @ npm ‚ù§Ô∏è",
          "From Montreal",
          "npm: ~ruyadorno",
          "Twitter: @ruyadorno",
          "GitHub: @ruyadorno"
        ]
      },
      "right": {
        "text": [
          "    .-\"\"\"\"\"-.",
          "    / _____/\\_\\",
          "   //`__   __ \\\\",
          "  //  (o) (o)  \\\\",
          " (_    (___)    _)",
          "   \\  \\_____/  /",
          "    `-._   _.-'",
          "    __.-)_(-,__ ",
          " ./'/   |_|   \\`\\.",
          " /   `\"\"\"\"\"\"\"\"\"\"`  \\"
        ]
      }
    },
    {
      "type": "simple",
      "title": "We all love clis ‚ù§Ô∏è",
      "text": "Command line tools are a fundamental part of our ecosystem"
    },
    {
      "type": "simple",
      "title": "ü§î",
      "text": "What about you start creating your own cli tools?"
    },
    {
      "type": "list",
      "title": "Let's get to it!",
      "list": [
        "Understanding cli commands",
        "Defining a reusable command",
        "Compose commands with Unix Pipelines",
        "Add Interactivity",
        "Use Node.js üöÄ"
      ]
    },
    {
      "type": "simple",
      "title": "DISCLAIMER",
      "text": "You're about to see a Graphic Designer talk about the command line interface"
    },
    {
      "type": "list",
      "title": "The command line is an AMAZING user interface",
      "list": [
        "user communication is based on words",
        "developers are always looking to reuse things",
        "commands [yellow]are[reset] words"
      ]
    },
    {
      "type": "code",
      "title": "Defining a command as an alias",
      "text": "Very simple example",
      "code": "alias foo=\"cat\""
    },
    {
      "type": "code",
      "title": "Defining a command as an alias",
      "text": "Customize a given command",
      "code": "alias status=\"git status -s\""
    },
    {
      "type": "code",
      "title": "Defining a command as bash function",
      "text": "More versatile",
      "code": [
        "function status () {",
        "  git status $1",
        "}"
      ]
    },
    {
      "type": "code",
      "title": "Using node",
      "text": "We can use the node runner as one of the commands",
      "code": [
        "function printsafe () {",
        "  node -p \"require('offensive-words-filter')('$1') ? '[blocked]' : '$1'\"",
        "}"
      ]
    },
    {
      "type": "code",
      "title": "Defining a command as a file",
      "text": "Any executable file under a directory specified in you $PATH is going to become a valid command\nThis trick makes all your local cli modules available as commands:",
      "code": "export PATH=$PATH:$(pwd)/node_modules/.bin"
    },
    {
      "type": "code",
      "title": "Define a package.json script",
      "text": "Any package.json script can be run with [cyan]npm run <name>[reset]",
      "code": [
        "{",
        "  \"name\": \"my-package\"",
        "  \"version\": \"1.0.0\"",
        "  \"scripts\": {",
        "    \"hello\": \"echo 'Hello'\"",
        "  }",
        "}"
      ]
    },
    {
      "type": "code",
      "title": "Defined by package.json and npm install it",
      "text": "package.json supports a \"bin\" property that can point at a file in the package and is going to turn that into a cli cmd\n\n[cyan]npm link[reset] will provide a system-wide cmd",
      "code": [
        "{",
        "  \"name\": \"the-foo-package\"",
        "  \"version\": \"1.0.0\"",
        "  \"bin\": \"bin/foo\"",
        "}"
      ]
    },
    {
      "type": "simple",
      "title": "Composing commands with Pipelines",
      "text": "Commands can be plugged together using the | operator"
    },
    {
      "type": "code",
      "title": "Composing commands with Pipelines",
      "text": "Customize a given command",
      "code": "alias getwordfile=\"find . -name *.js | grep $1\""
    },
    {
      "type": "code",
      "title": "Composing commands with Pipelines",
      "text": "[cyan]xargs[reset] is your friend",
      "code": "alias printfile=\"find . -name *.js | grep $1 | xargs cat\""
    },
    {
      "type": "code",
      "title": "Composing commands with Pipelines",
      "text": "can write down files easily with the [cyan]>[reset] operator",
      "code": [
        "function makeerror() {",
        "  cat \"$1\" | sed s/log/error/g > \"$2\";",
        "}"
      ]
    },
    {
      "type": "simple",
      "title": "We have seen the light! ü§©",
      "text": "Composable Unix commands can be very powerful and you're comfortable enough now to go write your own workflows"
    },
    {
      "type": "simple",
      "title": "npm.im/ipt",
      "text": "Interactive Pipe To"
    },
    {
      "type": "code",
      "title": "Creating interactive composed commands",
      "text": "Turning [cyan]cd[reset] into an interactive experience",
      "code": "function icd() { cd $(ls | ipt); }"
    },
    {
      "type": "code",
      "title": "Creating interactive composed commands",
      "text": "Interactive switch git branches",
      "code": "function branchswitch() { git branch | ipt | xargs git checkout; }"
    },
    {
      "type": "code",
      "title": "Creating interactive composed commands",
      "text": "Printing multiple files",
      "code": "function printfiles() { ls | ipt -m | xargs cat; }"
    },
    {
      "type": "code",
      "title": "Creating interactive composed commands",
      "text": "Handling filenames",
      "code": "function printgitfile() { git st | ipt -p | xargs cat; }"
    },
    {
      "type": "code",
      "title": "Creating interactive composed commands",
      "text": "Fuzzyfinder/autocomplete mode",
      "code": "function getline() { ipt \"$1\" -p; }"
    },
    {
      "type": "code",
      "title": "Creating interactive composed commands",
      "text": "Crazy interactive install specific version",
      "code": [
        "function niv() {",
        "  npm install ipt@$(",
        "    node -p \"Object.keys(",
        "      $(pacote packument ipt | json versions)",
        "    ).join('\\n')\" | ipt",
        "  )",
        "}"
      ]
    },
    {
      "type": "simple",
      "title": "üòÑ",
      "text": "Interactive commands are fun!"
    },
    {
      "type": "simple",
      "title": "npm.im/ntl",
      "text": "[green]‚¨¢[reset] Node Task List"
    },
    {
      "type": "simple",
      "title": "‚ù§Ô∏è",
      "text": "Hope you feel [green]really[reset] confident about creating your own cli workflows now"
    },
    {
      "type": "simple",
      "title": "Thank You",
      "text": "All these are available at my GitHub\n[blue][underscore]http://github.com/ruyadorno[reset]\n\nReach out on Twitter at [blue][bright]@ruyadorno[reset]"
    }
  ]
}
